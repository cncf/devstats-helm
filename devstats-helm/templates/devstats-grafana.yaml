{{- $skipGrafanas := .Values.skipGrafanas -}}
{{ if not $skipGrafanas }}
{{- $root := . -}}
{{- range $index, $_ := .Values.projects -}}
{{- if and (or (eq ($index|int) ($root.Values.indexGrafanasFrom|int)) (gt ($index|int) ($root.Values.indexGrafanasFrom|int))) (lt ($index|int) ($root.Values.indexGrafanasTo|int)) -}}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: '{{ $root.Values.grafanaPodName }}-{{ .proj }}'
  labels:
    name: devstats
    type: 'grafana'
    proj: {{ .proj }}
spec:
  replicas: {{ $root.Values.grafanaNReplicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ $root.Values.grafanaMaxSurge }}
      maxUnavailable: {{ $root.Values.grafanaMaxUnavailable }}
  selector:
    matchLabels:
      name: devstats
      type: 'grafana'
      proj: {{ .proj }}
  template:
    metadata:
      labels:
        name: devstats
        type: 'grafana'
        proj: {{ .proj }}
    spec:
      containers:
      - command:
        - {{ $root.Values.grafanaCommand }}
{{ if $root.Values.grafanaCommandArgs }}
        args:
{{- with $root.Values.grafanaCommandArgs -}}
{{ toYaml . | nindent 10 }}
{{ end }}
{{ end }}
{{ if $root.Values.useGrafanasResourcesLimits }}
        resources:
          requests:
            memory: '{{ $root.Values.requestsGrafanasMemory }}'
            cpu: '{{ $root.Values.requestsGrafanasCPU }}'
          limits:
            memory: '{{ $root.Values.limitsGrafanasMemory }}'
            cpu: '{{ $root.Values.limitsGrafanasCPU }}'
{{ end }}
        name: '{{ $root.Values.grafanaPodName }}-{{ .proj }}'
        image: {{ $root.Values.grafanaImage }}
        imagePullPolicy: {{ $root.Values.imagePullPolicy }}
        ports:
        - containerPort: {{ $root.Values.grafanaPort }}
        env:
        - name: ICON
          value: {{ .icon }}
        - name: ORGNAME
          value: {{ .org }}
        - name: PROJ
          value: {{ .proj }}
        - name: PG_DB
          value: {{ .db }}
        - name: PG_PORT
          value: '5432'
        - name: PG_HOST
          valueFrom:
            secretKeyRef:
              name: {{ $root.Values.pgSecret }}
              key: PG_HOST_RO.secret
        - name: PG_PASS
          valueFrom:
            secretKeyRef:
              name: {{ $root.Values.pgSecret }}
              key: PG_PASS_RO.secret
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: {{ $root.Values.grafanaSecret }}
              key: GF_SECURITY_ADMIN_USER.secret
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $root.Values.grafanaSecret }}
              key: GF_SECURITY_ADMIN_PASSWORD.secret
        livenessProbe:
          exec:
            command:
            - 'grafana_health_check.sh'
            - '127.0.0.1:3000'
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - 'grafana_health_check.sh'
            - '127.0.0.1:3000'
          initialDelaySeconds: 10
          periodSeconds: 30
      restartPolicy: {{ $root.Values.grafanaRestartPolicy }}
      nodeSelector:
{{- with $root.Values.appNodeSelector -}}
{{ toYaml . | nindent 8 }}
{{ end }}
{{ end }}
{{ end }}
{{ end }}
