{{- $skipStatic := .Values.skipStatic -}}
{{ if not $skipStatic }}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: '{{ .Values.namespace }}'
  name: devstats-static-default
  labels:
    name: devstats
    type: static
    proj: default
spec:
  replicas: {{ .Values.staticNReplicas }}
  template:
    metadata:
      namespace: '{{ .Values.namespace }}'
      labels:
        name: devstats
        type: static
        proj: default
    spec:
      containers:
      - env:
        image: {{ .Values.staticImage }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        name: devstats-static-default
        ports:
        - containerPort: 80
        livenessProbe:
          exec:
            command:
            - '/usr/bin/static_page_health_check.sh'
            - '127.0.0.1:80'
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - '/usr/bin/static_page_health_check.sh'
            - '127.0.0.1:80'
          initialDelaySeconds: 10
          periodSeconds: 30
{{ if .Values.useStaticsResourcesLimits }}
        resources:
          requests:
            memory: '{{ .Values.requestsStaticsMemory }}'
            cpu: '{{ .Values.requestsStaticsCPU }}'
          limits:
            memory: '{{ .Values.limitsStaticsMemory }}'
            cpu: '{{ .Values.limitsStaticsCPU }}'
{{ end }}
---
apiVersion: v1
kind: Service
metadata:
  namespace: '{{ .Values.namespace }}'
  name: devstats-static-service-default
  labels:
    name: devstats
    type: static-service-default
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    name: devstats
    type: static
    proj: default
{{- $root := . -}}
{{ range $jndex, $_ := .Values.domains }}
{{ if and (or (eq ($jndex|int) ($root.Values.indexStaticsFrom|int)) (gt ($jndex|int) ($root.Values.indexStaticsFrom|int))) (lt ($jndex|int) ($root.Values.indexStaticsTo|int)) }}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: '{{ $root.Values.namespace }}'
  name: 'devstats-static-{{ .shortname }}'
  labels:
    name: devstats
    type: static
    proj: '{{ .shortname }}'
spec:
  replicas: {{ $root.Values.staticNReplicas }}
  template:
    metadata:
      namespace: '{{ $root.Values.namespace }}'
      labels:
        name: devstats
        type: static
        proj: '{{ .shortname }}'
    spec:
      containers:
      volumes:
      - name: '{{ .Values.volumeName }}-backups'
        persistentVolumeClaim:
          claimName: '{{ .Values.backupsPVName }}'
      - env:
        image: '{{ .image }}'
        imagePullPolicy: {{ $root.Values.imagePullPolicy }}
        name: 'devstats-static-{{ .shortname }}'
        volumeMounts:
        - name: '{{ .Values.volumeMountName }}-backups'
          mountPath: '{{ .Values.backupsVolumeMountPath }}'
        ports:
        - containerPort: 80
        livenessProbe:
          exec:
            command:
            - '/usr/bin/static_page_health_check.sh'
            - '127.0.0.1:80'
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - '/usr/bin/static_page_health_check.sh'
            - '127.0.0.1:80'
          initialDelaySeconds: 10
          periodSeconds: 30
{{ if $root.Values.useStaticsResourcesLimits }}
        resources:
          requests:
            memory: '{{ $root.Values.requestsStaticsMemory }}'
            cpu: '{{ $root.Values.requestsStaticsCPU }}'
          limits:
            memory: '{{ $root.Values.limitsStaticsMemory }}'
            cpu: '{{ $root.Values.limitsStaticsCPU }}'
{{ end }}
---
apiVersion: v1
kind: Service
metadata:
  namespace: '{{ $root.Values.namespace }}'
  name: 'devstats-static-service-{{ .shortname }}'
  labels:
    name: devstats
    type: 'static-service-{{ .shortname }}'
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    name: devstats
    type: static
    proj: '{{ .shortname }}'
{{ end }}
{{ end }}
{{ end }}
